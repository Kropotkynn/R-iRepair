#!/bin/bash

# =====================================================
# Script de D√©marrage Rapide R iRepair
# =====================================================
# Ce script v√©rifie les pr√©requis et lance le d√©ploiement

set -e

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m'

log_info() { echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"; }
log_success() { echo -e "${GREEN}‚úÖ $1${NC}"; }
log_warning() { echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"; }
log_error() { echo -e "${RED}‚ùå $1${NC}"; }

clear
echo -e "${CYAN}"
cat << "EOF"
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                                                   ‚ïë
‚ïë        üöÄ R iRepair - D√©marrage Rapide üöÄ        ‚ïë
‚ïë                                                   ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
echo -e "${NC}"

# V√©rification Docker
log_info "V√©rification de Docker..."
if ! command -v docker &> /dev/null; then
    log_error "Docker n'est pas install√©"
    log_info "Ex√©cutez d'abord: sudo ./install.sh"
    exit 1
fi
log_success "Docker: $(docker --version)"

# V√©rification Docker Compose
log_info "V√©rification de Docker Compose..."
if ! command -v docker-compose &> /dev/null; then
    log_error "Docker Compose n'est pas install√©"
    log_info "Ex√©cutez d'abord: sudo ./install.sh"
    exit 1
fi
log_success "Docker Compose: $(docker-compose --version)"

# V√©rification du fichier .env
log_info "V√©rification de la configuration..."
if [ ! -f .env.production ]; then
    log_warning "Fichier .env.production manquant"
    log_info "Cr√©ation depuis .env.example..."
    cp .env.example .env.production
    log_success "Fichier .env.production cr√©√©"
    log_warning "‚ö†Ô∏è  IMPORTANT: √âditez .env.production avant de continuer"
    echo ""
    read -p "Voulez-vous √©diter maintenant? (o/n) " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Oo]$ ]]; then
        ${EDITOR:-nano} .env.production
    fi
fi

# V√©rification des ports
log_info "V√©rification des ports..."
PORTS_OK=true
for port in 80 443 3000 5432 6379 8000; do
    if netstat -tuln 2>/dev/null | grep -q ":$port " || ss -tuln 2>/dev/null | grep -q ":$port "; then
        log_warning "Port $port d√©j√† utilis√©"
        PORTS_OK=false
    fi
done

if [ "$PORTS_OK" = false ]; then
    log_warning "Certains ports sont occup√©s. Continuer quand m√™me?"
    read -p "Continuer? (o/n) " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Oo]$ ]]; then
        exit 1
    fi
fi

# Menu de d√©ploiement
echo ""
echo -e "${CYAN}Choisissez une option:${NC}"
echo "1. D√©ploiement complet (recommand√©)"
echo "2. D√©ploiement sans monitoring"
echo "3. D√©veloppement local"
echo "4. V√©rifier le statut"
echo "5. Voir les logs"
echo "6. Arr√™ter les services"
echo ""
read -p "Votre choix (1-6): " choice

case $choice in
    1)
        log_info "D√©ploiement complet en cours..."
        ./deploy/deploy.sh deploy production
        ;;
    2)
        log_info "D√©ploiement sans monitoring..."
        docker-compose up -d postgres redis backend frontend nginx
        ;;
    3)
        log_info "D√©marrage en mode d√©veloppement..."
        docker-compose up -d
        ;;
    4)
        log_info "Statut des services:"
        docker-compose ps
        ;;
    5)
        log_info "Logs en temps r√©el (Ctrl+C pour quitter):"
        docker-compose logs -f
        ;;
    6)
        log_info "Arr√™t des services..."
        docker-compose down
        log_success "Services arr√™t√©s"
        ;;
    *)
        log_error "Choix invalide"
        exit 1
        ;;
esac

echo ""
log_success "Termin√©!"
