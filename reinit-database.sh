#!/bin/bash

# =====================================================
# Script de R√©initialisation Compl√®te de la Base
# =====================================================

set -e

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m'

echo -e "${CYAN}"
cat << "EOF"
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                                                   ‚ïë
‚ïë   üîÑ R√©initialisation Base de Donn√©es R iRepair  ‚ïë
‚ïë                                                   ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
echo -e "${NC}"
echo ""

# √âtape 1: Arr√™ter le frontend
echo -e "${BLUE}üì¶ √âtape 1: Arr√™t du frontend...${NC}"
docker stop rirepair-frontend || true
echo -e "${GREEN}‚úÖ Frontend arr√™t√©${NC}"
echo ""

# √âtape 2: Supprimer la base de donn√©es
echo -e "${BLUE}üóëÔ∏è  √âtape 2: Suppression de l'ancienne base...${NC}"
docker exec rirepair-postgres psql -U rirepair_user -d postgres -c "DROP DATABASE IF EXISTS rirepair;"
echo -e "${GREEN}‚úÖ Base supprim√©e${NC}"
echo ""

# √âtape 3: Recr√©er la base de donn√©es
echo -e "${BLUE}üÜï √âtape 3: Cr√©ation de la nouvelle base...${NC}"
docker exec rirepair-postgres psql -U rirepair_user -d postgres -c "CREATE DATABASE rirepair;"
echo -e "${GREEN}‚úÖ Base cr√©√©e${NC}"
echo ""

# √âtape 4: Appliquer le sch√©ma
echo -e "${BLUE}üìã √âtape 4: Application du sch√©ma...${NC}"
docker exec -i rirepair-postgres psql -U rirepair_user -d rirepair < database/schema.sql
echo -e "${GREEN}‚úÖ Sch√©ma appliqu√©${NC}"
echo ""

# √âtape 5: Appliquer les seeds
echo -e "${BLUE}üå± √âtape 5: Application des donn√©es initiales...${NC}"
docker exec -i rirepair-postgres psql -U rirepair_user -d rirepair < database/seeds.sql
echo -e "${GREEN}‚úÖ Seeds appliqu√©s${NC}"
echo ""

# √âtape 6: V√©rifier les donn√©es
echo -e "${BLUE}üîç √âtape 6: V√©rification des donn√©es...${NC}"
echo ""
echo -e "${CYAN}Utilisateurs:${NC}"
docker exec rirepair-postgres psql -U rirepair_user -d rirepair -c "SELECT username, email, role, is_active FROM users;"
echo ""
echo -e "${CYAN}Types d'appareils:${NC}"
docker exec rirepair-postgres psql -U rirepair_user -d rirepair -c "SELECT name FROM device_types;"
echo ""
echo -e "${CYAN}Marques:${NC}"
docker exec rirepair-postgres psql -U rirepair_user -d rirepair -c "SELECT COUNT(*) as total_brands FROM brands;"
echo ""
echo -e "${CYAN}Cr√©neaux horaires:${NC}"
docker exec rirepair-postgres psql -U rirepair_user -d rirepair -c "SELECT COUNT(*) as total_slots FROM schedule_slots;"
echo ""

# √âtape 7: Red√©marrer le frontend
echo -e "${BLUE}üöÄ √âtape 7: Red√©marrage du frontend...${NC}"
docker start rirepair-frontend
sleep 5
echo -e "${GREEN}‚úÖ Frontend red√©marr√©${NC}"
echo ""

# √âtape 8: Test final
echo -e "${BLUE}üß™ √âtape 8: Test de connexion...${NC}"
sleep 3
curl -s http://localhost:3000/api/auth/check-admin | jq '.diagnostic.admin, .diagnostic.users'
echo ""

echo -e "${GREEN}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
echo -e "${GREEN}‚úÖ R√©initialisation termin√©e avec succ√®s !${NC}"
echo -e "${GREEN}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
echo ""
echo -e "${CYAN}üìã Identifiants admin:${NC}"
echo -e "   Username: ${YELLOW}admin${NC}"
echo -e "   Password: ${YELLOW}admin123${NC}"
echo ""
echo -e "${CYAN}üåê Acc√®s:${NC}"
echo -e "   Application: ${YELLOW}http://localhost:3000${NC}"
echo -e "   Admin: ${YELLOW}http://localhost:3000/admin/login${NC}"
echo ""
