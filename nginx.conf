# =====================================================
# Configuration Nginx - R iRepair Reverse Proxy
# =====================================================

events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Configuration des logs
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    # Optimisations de performance
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 10M;

    # Compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Configuration des upstreams
    upstream frontend {
        server frontend:3000;
    }

    upstream backend {
        server backend:8000;
    }

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=public:10m rate=5r/s;

    # =====================================================
    # Serveur Principal (HTTP)
    # =====================================================
    server {
        listen 80;
        server_name localhost rirepair.local *.rirepair.com;

        # Headers de sécurité
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;

        # Route de health check pour le load balancer
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # ===== Routes API Backend =====
        location /api/ {
            # Rate limiting pour les APIs
            limit_req zone=api burst=20 nodelay;
            
            # Headers pour les API
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # CORS pour les APIs
            add_header 'Access-Control-Allow-Origin' '$http_origin' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Accept,Authorization,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,User-Agent,X-Requested-With' always;

            # Gestion des requêtes OPTIONS (preflight CORS)
            if ($request_method = 'OPTIONS') {
                return 204;
            }

            # Proxy vers le backend
            proxy_pass http://backend;
            proxy_redirect off;
            
            # Timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # Buffer pour les uploads
            client_body_buffer_size 128k;
            proxy_buffers 4 256k;
            proxy_buffer_size 128k;
        }

        # ===== WebSocket pour les notifications temps réel =====
        location /socket.io/ {
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Timeouts pour WebSocket
            proxy_connect_timeout 7d;
            proxy_send_timeout 7d;
            proxy_read_timeout 7d;
        }

        # ===== Assets statiques (cache long) =====
        location /_next/static/ {
            proxy_pass http://frontend;
            proxy_cache_valid 200 1y;
            add_header Cache-Control "public, immutable";
        }

        location /images/ {
            proxy_pass http://frontend;
            proxy_cache_valid 200 30d;
            add_header Cache-Control "public";
        }

        # ===== Routes Frontend Next.js =====
        location / {
            # Rate limiting pour le site public
            limit_req zone=public burst=10 nodelay;
            
            # Headers pour le frontend
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Proxy vers le frontend
            proxy_pass http://frontend;
            proxy_redirect off;
            
            # Timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # Headers pour Next.js
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
        }
    }

    # =====================================================
    # Serveur HTTPS (Production avec SSL)
    # =====================================================
    server {
        listen 443 ssl http2;
        server_name rirepair.com www.rirepair.com;

        # Certificats SSL (à configurer selon votre fournisseur)
        ssl_certificate /etc/nginx/ssl/rirepair.com.crt;
        ssl_certificate_key /etc/nginx/ssl/rirepair.com.key;

        # Configuration SSL moderne
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 1d;

        # HSTS (HTTP Strict Transport Security)
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # Redirection HTTP vers HTTPS
        error_page 497 https://$server_name$request_uri;

        # Même configuration que HTTP mais en HTTPS
        include /etc/nginx/conf.d/rirepair-locations.conf;
    }

    # =====================================================
    # Variables de connexion upgrade pour WebSocket
    # =====================================================
    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }
}

# =====================================================
# Configuration globale
# =====================================================

# Redirection HTTP vers HTTPS (pour la production)
# server {
#     listen 80;
#     server_name rirepair.com www.rirepair.com;
#     return 301 https://$server_name$request_uri;
# }