# =====================================================
# Docker Compose - R iRepair Full Stack
# =====================================================

version: '3.8'

services:
  # ===== Base de Données PostgreSQL =====
  postgres:
    image: postgres:15-alpine
    container_name: rirepair-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-rirepair}
      POSTGRES_USER: ${DB_USER:-rirepair_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-rirepair_secure_password_change_this}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./database/seeds.sql:/docker-entrypoint-initdb.d/02-seeds.sql
    ports:
      - "5432:5432"
    networks:
      - rirepair-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U rirepair_user -d rirepair"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ===== Cache Redis (Optionnel) =====
  redis:
    image: redis:7-alpine
    container_name: rirepair-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-rirepair_redis_password}
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-rirepair_redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - rirepair-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-rirepair_redis_password}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # ===== Backend API =====
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: rirepair-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 8000
      
      # Base de données
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${DB_USER:-rirepair_user}
      DB_PASSWORD: ${DB_PASSWORD:-rirepair_secure_password_change_this}
      DB_NAME: ${DB_NAME:-rirepair}
      DB_SSL: false
      
      # Redis
      REDIS_URL: redis://rirepair-redis:6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-rirepair_redis_password}
      
      # JWT
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-minimum-32-characters-long-change-this}
      
      # Frontend
      FRONTEND_URL: http://frontend:3000
      ALLOWED_ORIGINS: http://localhost:3000,http://frontend:3000
      
      # Email (configurez selon vos besoins)
      SMTP_HOST: ${SMTP_HOST:-smtp.gmail.com}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER:-your-email@gmail.com}
      SMTP_PASSWORD: ${SMTP_PASSWORD:-your-app-password}
      SMTP_FROM: ${SMTP_FROM:-noreply@rirepair.com}
      
      # Monitoring
      LOG_LEVEL: info
      ENABLE_METRICS: true
      
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/logs:/app/logs
    ports:
      - "8000:8000"
    networks:
      - rirepair-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===== Frontend Next.js =====
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: rirepair-frontend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      
      # API Backend
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://backend:8000/api/v1}
      NEXT_PUBLIC_WS_URL: ${NEXT_PUBLIC_WS_URL:-ws://backend:8000}
      
      # Application
      NEXT_PUBLIC_BASE_URL: ${NEXT_PUBLIC_BASE_URL:-http://localhost:3000}
      NEXT_PUBLIC_APP_NAME: ${NEXT_PUBLIC_APP_NAME:-R iRepair}
      NEXT_PUBLIC_APP_VERSION: "1.0.0"
      
      # Analytics (optionnel)
      NEXT_PUBLIC_ANALYTICS_ID: ""
      
      # Features flags
      NEXT_PUBLIC_ENABLE_LIVE_CHAT: false
      NEXT_PUBLIC_ENABLE_NOTIFICATIONS: true
      
    ports:
      - "3000:3000"
    networks:
      - rirepair-network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===== Reverse Proxy Nginx =====
  nginx:
    image: nginx:alpine
    container_name: rirepair-nginx
    restart: unless-stopped
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro  # Certificats SSL si disponibles
    ports:
      - "80:80"
      - "443:443"
    networks:
      - rirepair-network
    depends_on:
      - frontend
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===== Monitoring avec Prometheus (Optionnel) =====
  prometheus:
    image: prom/prometheus:latest
    container_name: rirepair-prometheus
    restart: unless-stopped
    profiles:
      - monitoring
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - rirepair-network

  # ===== Grafana pour les métriques (Optionnel) =====
  grafana:
    image: grafana/grafana:latest
    container_name: rirepair-grafana
    restart: unless-stopped
    profiles:
      - monitoring
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin_grafana_password
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana-dashboard.json:/etc/grafana/provisioning/dashboards/rirepair.json
    ports:
      - "3001:3000"
    networks:
      - rirepair-network

# =====================================================
# Volumes Persistants
# =====================================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# =====================================================
# Réseau
# =====================================================
networks:
  rirepair-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.28.0.0/16
