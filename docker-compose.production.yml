# =====================================================
# Docker Compose - R iRepair Production
# =====================================================
# Clean production setup with PostgreSQL + Next.js
# No backend needed - Next.js API routes handle everything
# =====================================================

version: '3.8'

services:
  # ===== PostgreSQL Database =====
  postgres:
    image: postgres:15-alpine
    container_name: rirepair-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-rirepair}
      POSTGRES_USER: ${DB_USER:-rirepair_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-rirepair_secure_password_change_this}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./database/seeds.sql:/docker-entrypoint-initdb.d/02-seeds.sql
    ports:
      - "5432:5432"
    networks:
      - rirepair-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-rirepair_user} -d ${DB_NAME:-rirepair}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ===== Frontend Next.js (with integrated API routes) =====
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: rirepair-frontend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      
      # Database connection (direct from Next.js)
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${DB_USER:-rirepair_user}
      DB_PASSWORD: ${DB_PASSWORD:-rirepair_secure_password_change_this}
      DB_NAME: ${DB_NAME:-rirepair}
      
      # Application settings
      NEXT_PUBLIC_BASE_URL: ${NEXT_PUBLIC_BASE_URL:-http://localhost:3000}
      NEXT_PUBLIC_APP_NAME: ${NEXT_PUBLIC_APP_NAME:-R iRepair}
      NEXT_PUBLIC_APP_VERSION: "1.0.0"
      
    ports:
      - "3000:3000"
    networks:
      - rirepair-network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===== Nginx Reverse Proxy (Optional - for production with SSL) =====
  nginx:
    image: nginx:alpine
    container_name: rirepair-nginx
    restart: unless-stopped
    profiles:
      - production
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - rirepair-network
    depends_on:
      - frontend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

# =====================================================
# Volumes
# =====================================================
volumes:
  postgres_data:
    driver: local

# =====================================================
# Network
# =====================================================
networks:
  rirepair-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.28.0.0/16
